What happens when you initialize a repository? Why do you need to do it?

	a hidden .git folder is created in the directory (or it makes the directory a git repository).
	this is enable to start to track files that you would want to commit.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	the staging area acts like an intermediary between the working directoryand the repository.
	it gives you more control of the files you want to track before you eventually commit them.

How can you use the staging area to make sure you have one commit per logical
change?

	by using git diff to compare the difference between the staging area and the most recent commit
	and by using git diff --staged to compare the difference between the staging area and the most recent commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	maybe when you have unoffical version of a project you want to experiment on.

How do the diagrams help you visualize the branch structure?

	it makes it easier to identify the branches and the commits directly under them.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	the result of merging two branches together is a single branch
	with the appropriate commits from both branches. It is represented
	in the diagram so we can see what branches would be merged and what
	commits would be added to the merged branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
	the pros of Git's auto is that it's saves you the time of going through each version of the code
	and fixing it yourself.
	the con is you sometimes get merge conflicts which you'll eventually
	have to fix yourself.
